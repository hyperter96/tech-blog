import{j as s,b as i,c as a,aa as e}from"./chunks/framework._Kr-eMMD.js";const g=JSON.parse('{"title":"Client-go系列七：Client-go类库（下）","description":"","frontmatter":{"sidebar":false,"cover":"https://cdn.jsdelivr.net/gh/hyperter96/tech-blog/docs/assets/images/client-go-cover.jpeg","author":"熬小剑","date":"2023-01-25T00:00:00.000Z","tag":["Go","Client-go"],"sticky":1,"prev":{"text":"Client-go系列六：Client-go类库（上）","link":"/posts/programming/go/client-go/client-go-pkg-part1"},"head":[]},"headers":[],"relativePath":"posts/programming/go/client-go/client-go-pkg-part2.md","filePath":"posts/programming/go/client-go/client-go-pkg-part2.md","lastUpdated":1712826380000}'),n={name:"posts/programming/go/client-go/client-go-pkg-part2.md"},t=e(`<h1 id="client-go系列七-client-go类库-下" tabindex="-1">Client-go系列七：Client-go类库（下） <a class="header-anchor" href="#client-go系列七-client-go类库-下" aria-label="Permalink to &quot;Client-go系列七：Client-go类库（下）&quot;">​</a></h1><h2 id="删除资源" tabindex="-1">删除资源 <a class="header-anchor" href="#删除资源" aria-label="Permalink to &quot;删除资源&quot;">​</a></h2><p>要从集群中删除资源，可以对你要删除的资源使用删除方法。例如，要从 <code>project1</code> 命名空间中删除一个名为 <code>nginx-pod</code> 的 Pod，可以使用：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientset.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     CoreV1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     Pods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;project1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     Delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nginx-pod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">metav1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DeleteOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{})</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意📢：</p><p>不保证操作终止时资源被删除。删除操作不会有效地删除资源，但会标记资源被删除（通过设置字段 <code>.metadata.deletionTimestamp</code>），并且删除将以异步方式发生。</p></div><p><code>DryRun</code> - 这表明API服务器端的哪些操作应该被执行。唯一可用的值是 <code>metav1.DryRunAll</code>，表示要执行所有的操作，除了（将资源持久化到存储的操作）。使用这个选项，你可以得到命令的结果，而不是真的删除资源，并检查在这个删除过程中是否会发生错误。</p><p><code>GracePeriodSeconds</code> - 这个值只在删除 pod 时有用。它表示在删除 pod 之前的持续时间，单位是秒。</p><p>该值必须是一个指向非负整数的指针。值为零表示立即删除。如果这个值为 <code>nil</code>，将使用 pod 的默认宽限期，如 pod spec 中的<code>TerminationGracePeriodSeconds</code> 字段所示。</p><p>你可以使用 <code>metav1.NewDeleteOptions</code> 函数来创建一个定义了 <code>GracePeriodSeconds的DeleteOptions</code> 的结构体：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientset.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     CoreV1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     Pods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;project1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     Delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;nginx-pod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">metav1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewDeleteOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     )</span></span></code></pre></div><p><code>Preconditions</code>（前提条件） - 当你删除一个对象时，你可能想确保删除预期的对象。前提条件字段让你指出你期望删除的资源，可以通过以下方式：</p><p>指明UID，所以如果预期的资源被删除，而另一个资源被创建了相同的名字，那么删除将失败，产生一个冲突错误。你可以使用<code>metav1.NewPreconditionDeleteOptions</code> 函数来创建一个 <code>DeleteOptions</code> 结构体，并设置 Preconditions 的UID：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> createdPod.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientset.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     CoreV1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     Pods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;project1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     Delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;nginx-pod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">metav1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewPreconditionDeleteOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">               string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uid),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> errors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IsConflict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>指定 <code>ResourceVersion</code>，所以如果在此期间资源被更新，删除将失败，并出现 Conflict 错误。你可以使用 <code>metav1.NewRVDeletionPrecondition</code> 函数来创建一个 <code>DeleteOptions</code> 结构体，并设置前提条件的 <code>ResourceVersion</code>：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> createdPod.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetResourceVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientset.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     CoreV1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     Pods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;project1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     Delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;nginx-pod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">metav1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewRVDeletionPrecondition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               rv,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> errors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IsConflict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>OrphanDependents</code> - 这个字段已被废弃，转而使用 <code>PropagationPolicy</code>。</p><p><code>PropagationPolicy</code> - 这表明是否以及如何进行垃圾收集。参见第三章的 “<code>OwnerReferences</code>” 部分。可接受的值是：</p><ul><li><p><code>metav1.DeletePropagationOrphan</code> - 向Kubernetes API表示将你正在删除的资源所拥有的资源变成孤儿，这样它们就不会被垃圾收集器删除。</p></li><li><p><code>metav1.DeletePropagationBackground</code> - 指示Kubernetes API在所有者资源被标记为删除后立即返回删除操作，而不是等待拥有的资源被垃圾收集器删除。</p></li><li><p><code>metav1.DeletePropagationForeground</code> - 指示 Kubernetes API 在所有者和 <code>BlockOwnerDeletion</code> 设置为 <code>true</code> 的自有资源被删除后，从 <code>Delete</code> 操作中返回。Kubernetes API将不会等待其他拥有的资源被删除。</p></li></ul><p>以下是删除操作特有的可能错误：</p><ul><li><code>IsNotFound</code> - 这个函数表示你在请求中指定的资源或命名空间不存在。</li><li><code>IsConflict</code> - 这个函数表示请求失败，因为一个前提条件没有被遵守（UID或<code>ResourceVersion</code>）。</li></ul><h2 id="删除资源集合" tabindex="-1">删除资源集合 <a class="header-anchor" href="#删除资源集合" aria-label="Permalink to &quot;删除资源集合&quot;">​</a></h2><p>要从集群中删除资源集合，你可以为你要删除的资源使用 <code>DeleteCollection</code> 方法。例如，要从 <code>project1</code> 命名空间中删除 Pod 的集合：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientset.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     CoreV1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     Pods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;project1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     DeleteCollection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          ctx,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          metav1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DeleteOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          metav1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ListOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     )</span></span></code></pre></div><p>必须向该函数提供两组选项：</p><ul><li><code>DeleteOptions</code>，表示对每个对象进行删除操作的选项，如 “删除资源” 部分所述。</li><li><code>ListOptions</code>，细化要删除的资源集合，如 “获取资源列表” 部分所述。</li></ul><h2 id="更新资源" tabindex="-1">更新资源 <a class="header-anchor" href="#更新资源" aria-label="Permalink to &quot;更新资源&quot;">​</a></h2><p>要更新集群中的资源，你可以为你要更新的资源使用更新方法。例如，使用以下方法来更新 <code>project1</code> 命名空间中的 <code>deployment</code>：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">updatedDep, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientset.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     AppsV1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     Deployments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;project1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     Update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          ctx,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          myDep,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          metav1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UpdateOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     )</span></span></code></pre></div><p>当更新资源时，要声明到 <code>UpdateOptions</code> 结构体中的各种选项，与 “创建资源&quot;一节中描述的 <code>CreateOptions</code> 中的选项相同。</p><p>更新操作可能出现的特定错误是：</p><ul><li><code>IsInvalid</code> - 这个函数表示传递到结构中的数据是无效的。</li><li><code>IsConflict</code>（冲突）–该函数表示纳入结构中的 <code>ResourceVersion</code>（这里是 <code>myDep</code>）比集群中的版本要早。更多信息请参见第2章的 “更新资源管理冲突” 部分。</li></ul><h2 id="使用-strategic-merge-patch-来更新资源" tabindex="-1">使用 <code>Strategic Merge Patch</code> 来更新资源 <a class="header-anchor" href="#使用-strategic-merge-patch-来更新资源" aria-label="Permalink to &quot;使用 \`Strategic Merge Patch\` 来更新资源&quot;">​</a></h2><p>在第二章 “使用<code>Strategic Merge Patch</code>（战略合并补丁）更新资源 “一节中，你已经看到了用战略合并补丁对资源进行修补的过程。总而言之，你需要：</p><ul><li>使用 “Patch” 操作：</li><li>为 <code>content-type</code>头指定特定的值</li><li>在正文中传递你想修改的唯一字段</li></ul><p>使用 Client-go 库，你可以对你要修补的资源使用 <code>Patch</code> 方法。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Patch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     ctx context.Context,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     pt types.PatchType,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     data []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     opts metav1.PatchOptions,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     subresources </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     ) (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v1.Deployment, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>PatchType</code> 表明你是想使用 StrategicMerge patch（<code>types.StrategicMergePatchType</code>）还是合并补丁（<code>types.MergePatchType</code>）。这些常数在<code>k8s.io/apimachinery/pkg/types</code>包中定义。</p><p><code>data</code> 字段包含你想应用到资源的补丁。你可以直接写这个补丁数据，就像在第二章中做的那样，或者你可以使用 <code>controller-runtime</code> 的以下功能来帮助你建立这个补丁。这个库将在第10章中进行更深入的探讨。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sigs.k8s.io/controller-runtime/pkg/client</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StrategicMergeFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">     obj</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">     opts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MergeFromOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Patch</span></span></code></pre></div><p><code>StrategicMergeFrom</code> 函数的第一个参数接受一个 <code>Object</code> 类型，代表任何 Kubernetes 对象。你将通过这个参数传递你想要修补的对象，在任何改变之前。</p><p>然后，该函数接受一系列的选项。目前唯一接受的选项是 <code>client.MergeFromWithOptimisticLock{}</code> 值。这个值要求库将 <code>ResourceVersion</code> 添加到补丁数据中，因此服务器将能够检查你要更新的资源版本是否是最后一个。</p><p>在你使用 <code>StrategicMergeFrom</code> 函数创建了 <code>Patch</code> 对象后，你可以创建你想打补丁的对象的深度拷贝，然后修改它。然后，当你完成更新对象后，你可以用 <code>Patch</code> 对象的专用数据方法建立补丁的数据。</p><p>作为例子，要为 Deployment 建立补丁数据，包含乐观锁的资源版本（<code>ResourceVersion</code>），你可以使用下面的代码（<code>createdDep</code> 是一个反映在集群中创建的Deployment 的结构体）：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">patch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StrategicMergeFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     createdDep,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     pkgclient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MergeFromWithOptimisticLock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">updatedDep </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> createdDep.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DeepCopy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">updatedDep.Spec.Replicas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pointer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">patchData, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> patch.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(updatedDep)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// patchData = []byte(\`{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   &quot;metadata&quot;:{&quot;resourceVersion&quot;:&quot;4807923&quot;},</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   &quot;spec&quot;:{&quot;replicas&quot;:2}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// }\`)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">patchedDep, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientset.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     AppsV1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Deployments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;project1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Patch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          ctx,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;dep1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          patch.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          patchData,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          metav1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PatchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     )</span></span></code></pre></div><p>注意 <code>MergeFrom</code> 和 <code>MergeFromWithOptions</code> 函数也是可用的，如果你喜欢执行一个合并补丁。</p><p>Patch 对象的 Type 方法可以用来检索补丁类型，而不是使用类型包中的常量。你可以在调用补丁操作时传递 <code>PatchOptions</code>。可能的选项有：</p><ul><li><p><code>DryRun</code> - 这表明API服务器端的哪些操作应该被执行。唯一可用的值是 <code>metav1.DryRunAll</code>，表示执行所有操作，除了将资源持久化到存储。</p></li><li><p><code>Force</code> - 这个选项只能用于 Apply patch 请求，在处理 <code>StrategicMergePatch</code> 或 <code>MergePatch</code> 请求时必须取消设置。</p></li><li><p><code>FieldManager</code> - 这表示该操作的字段管理器的名称。这个信息将被用于未来的服务器端 Apply 操作。这个选项对于 <code>StrategicMergePatch</code> 或 <code>MergePatch</code> 请求是可选的。 <code>FieldValidation</code> - 这表明当结构体中出现重复或未知字段时，服务器应该如何反应。以下是可能的值：</p><ul><li><code>metav1.FieldValidationIgnore</code> - 忽略所有重复的或未知的字段</li><li><code>metav1.FieldValidationWarn</code> - 当出现重复或未知字段时发出警告</li><li><code>metav1.FieldValidationStrict</code> - 当出现重复字段或未知字段时失败。</li></ul></li></ul><p>注意，Patch 操作接受 <code>subresources</code> 参数。这个参数可以用来修补应用补丁方法的资源的子资源。例如，要修补一个 <code>Deployment</code> 的 <code>Status</code>，你可以使用<code>subresources</code> 参数的值 “<code>status</code>”。</p><p><code>MergePatch</code> 操作特有的可能的错误是：</p><ul><li><code>IsInvalid</code> - 这个函数指示作为补丁传递的数据是否无效。</li><li><code>IsConflict</code> - 这个函数表示并入补丁的资源版本（如果你在构建补丁数据时使用优化锁）是否比集群中的版本更早。更多信息可在第二章 “更新资源管理冲突 “部分找到。</li></ul><h2 id="用补丁在服务器端应用资源" tabindex="-1">用补丁在服务器端应用资源 <a class="header-anchor" href="#用补丁在服务器端应用资源" aria-label="Permalink to &quot;用补丁在服务器端应用资源&quot;">​</a></h2><p>第二章的 “在服务器端应用资源” 部分描述了服务器端应用补丁是如何工作的。总而言之，我们需要：</p><ul><li>使用 “补丁 “操作</li><li>为 <code>content-type</code> 头指定一个特定的值</li><li>在正文中传递你想修改的唯一字段</li><li>提供一个 <code>fieldManager</code> 名称</li></ul><p>使用 Client-go 库，你可以对你要修补的资源使用 <code>Patch</code> 方法。注意，你也可以使用 <code>Apply</code> 方法；见下一节，“使用<code>Apply</code>在服务器端应用资源”。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Patch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     ctx context.Context,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     pt types.PatchType,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     data []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     opts metav1.PatchOptions,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     subresources </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v1.Deployment, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>PatchType</code> 表示补丁的类型，这里是 <code>type.ApplyPatchType</code>，定义于 <code>k8s.io/apimachinery/pkg/types</code> 包。</p><p><code>data</code> 字段包含你想应用到资源的补丁。你可以使用 <code>client.Apply</code> 值来构建这个数据。这个值实现了 <code>client.Patch</code> 接口，提供了Type和Data方法。</p><p>注意，你需要在你想打补丁的资源结构体中设置 <code>APIVersion</code> 和 <code>Kind</code> 字段。还要注意，这个 <code>Apply</code> 操作也可以用来创建资源。</p><p>补丁操作接受 <code>subresources</code> 参数。这个参数可以用来修补应用<code>Patch</code>方法的资源的子资源。例如，要修补 <code>Deployment</code> 的 <code>Status</code>，你可以使用 <code>subresources</code> 参数的值 “<code>status</code>”。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sigs.k8s.io/controller-runtime/pkg/client</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wantedDep </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> appsv1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Deployment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Spec: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appsv1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DeploymentSpec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          Replicas: pointer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wantedDep.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dep1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wantedDep.APIVersion, wantedDep.Kind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     appsv1.SchemeGroupVersion.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          WithKind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Deployment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          ToAPIVersionAndKind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">patch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.Apply</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">patchData, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> patch.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wantedDep)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">patchedDep, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientset.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     AppsV1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Deployments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;project1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Patch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          ctx,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;dep1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          patch.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          patchData,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          metav1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PatchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          FieldManager: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-program&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     )</span></span></code></pre></div><p>你可以在调用 <code>Patch</code> 操作时传递 <code>PatchOptions</code>。以下是可能的选项：</p><ul><li><code>DryRun</code> - 这表明API服务器端的哪些操作应该被执行。唯一可用的值是 <code>metav1.DryRunAll</code>，表示执行所有操作，除了将资源持久化到存储。</li><li><code>Force</code> - 这个选项表示强制应用请求。这意味着这个请求的字段管理器将获得其他字段管理器所拥有的冲突字段。</li><li><code>FieldManager</code> - 这表示该操作的字段管理器的名称。这个信息将被用于未来的服务器端 <code>Apply</code> 操作。</li><li><code>FieldValidation</code> - 这表明当结构体中出现重复或未知字段时，服务器应该如何反应。以下是可能的值：</li><li><code>metav1.FieldValidationIgnore</code> - 忽略所有重复的或未知的字段</li><li><code>metav1.FieldValidationWarn</code> - 当出现重复或未知字段时发出警告</li><li><code>metav1.FieldValidationStrict</code> - 当出现重复字段或未知字段时失败。</li></ul><p><code>ApplyPatch</code> 操作特有的可能的错误是：</p><ul><li><code>IsInvalid</code> - 这个函数指示作为补丁传递的数据是否无效。</li><li><code>IsConflict</code> - 这个函数表示被补丁修改的一些字段是否有冲突，因为它们被另一个字段管理器拥有。为了解决这个冲突，你可以使用强制选项，这样这些字段就会被这个操作的字段管理器获得。</li></ul><h2 id="监视资源" tabindex="-1">监视资源 <a class="header-anchor" href="#监视资源" aria-label="Permalink to &quot;监视资源&quot;">​</a></h2><p>第二章的 “监视资源 “部分描述了 Kubernetes API 如何观察资源。使用 Client-go 库，你可以对你想观察的资源使用<code>Watch</code>方法。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     ctx context.Context,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     opts metav1.ListOptions,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (watch.Interface, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>这个 <code>Watch</code> 方法返回一个实现了 <code>watch.Interface</code> 接口的对象，并提供以下方法：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">k8s.io/apimachinery/pkg/watch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     ResultChan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;-chan</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Event</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     Stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>ResultChan</code> 方法返回一个 Go通道（只能读取），你将能够接收所有的事件。</p><p><code>Stop</code> 方法将停止 <code>Watch</code> 操作并关闭使用 <code>ResultChan</code> 接收的通道。</p><p>使用通道接收的 <code>watch.Event</code> 对象的定义如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Type </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EventType</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runtime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Type 字段可以得到第2章表2-2中早先描述的值，你可以在 <code>watch</code> 包中找到这些不同值的常量：<code>watch.Added</code>, <code>watch.Modified</code>, <code>watch.Deleted</code>, <code>watch.Bookmark</code>, 和 <code>watch.Error</code>。</p><p><code>Object</code> 字段实现了 <code>runtime.Object</code> 接口，它的具体类型可以根据 <code>Type</code> 的值而不同。</p><p>对于除 <code>Error</code> 以外的类型，<code>Object</code> 的具体类型将是你正在监视的资源的类型（例如，如果你正在监视 <code>Deployment</code>，则是 <code>Deployment</code> 类型）。</p><p>对于 <code>Error</code> 类型，具体类型通常是 <code>metav1.Status</code>，但它可以是任何其他类型，取决于你正在观察的资源。作为一个例子，这里有一段观察部署的代码：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">k8s.io/apimachinery/pkg/watch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">watcher, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientset.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AppsV1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     Deployments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;project1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     Watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          ctx,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          metav1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ListOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> watcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ResultChan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ev.Object.(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appsv1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Deployment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> %s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ev.Type, v.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">metav1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, v.Status)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          watcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在观察资源时，需要在 <code>ListOptions</code> 结构体中声明的各种选项如下：</p><ul><li><p><code>LabelSelector, FieldSelector</code> - 这是用来过滤按标签或按字段观察的元素。这些选项在 “过滤列表结果” 部分有详细说明。</p></li><li><p><code>Watch, AllowWatchBookmarks</code> - Watch 选项表示正在运行一个观察操作。这个选项是在执行 <code>Watch</code> 方法时自动设置的；你不需要明确地设置它。</p></li><li><p><code>AllowWatchBookmarks</code> 选项要求服务器定期返回 <code>Bookmarks</code>。书签的使用在第二章的 “允许书签有效地重启观察请求” 一节中有所描述。</p></li><li><p><code>ResourceVersion, ResourceVersionMatch</code> - 这表明你想在资源列表的哪个版本上开始观察操作。</p><p>请注意，当收到 <code>List</code> 操作的响应时，会为列表元素本身指出一个<code>ResourceVersion</code>值，以及列表中每个元素的<code>ResourceVersion</code>值。选项中指出的<code>ResourceVersion</code>是指列表的<code>ResourceVersion</code>。</p></li><li><p><code>ResourceVersionMatch</code> 选项不用于观察操作。对于观察操作，请执行以下操作：</p><ul><li><p>当 <code>ResourceVersion</code> 没有设置时，API将从最近的资源列表开始观察操作。该通道首先接收 <code>ADDED</code> 事件以声明资源的初始状态，然后在集群上发生变化时接收其他事件。</p></li><li><p>当 <code>ResourceVersion</code> 被设置为一个特定的版本时，API将从资源列表的指定版本开始观察操作。该通道将不接收声明资源初始状态的 <code>ADDED</code> 事件，而只接收该版本之后集群上发生变化时的事件（可以是指定版本和你运行Watch操作之间发生的事件）。</p></li><li><p>一个用例是观察一个特定资源的删除情况。为此，你可以</p><p>1. 列出资源，包括你想删除的那个，并保存收到的列表的<code>ResourceVersion</code>。 2. 对资源执行删除操作（删除是异步的，当操作终止时，资源可能不会被删除）。 3. 通过指定在步骤1中收到的<code>ResourceVersion</code>，启动一个<code>Watch</code>操作。即使删除发生在步骤2和步骤3之间，你也能保证收到<code>DELETED</code>事件。</p></li></ul></li><li><p>当 <code>ResourceVersion</code> 被设置为 “0 “时，API将在任何资源列表中启动<code>Watch</code>操作。该通道首先接收<code>ADDED</code>事件，以声明资源的初始状态，然后在这个初始状态之后集群上发生变化时接收其他事件。</p></li></ul><p>​在使用这种语义时，你必须特别小心，因为<code>Watch</code>操作通常会从最新的版本开始；但是，从较早的版本开始也是可能的。</p><ul><li>TimeoutSeconds - 这将请求的持续时间限制在指定的秒数内。</li><li>Limit, Continue - 这用于对列表操作的结果进行分页。这些选项不支持观察操作。</li></ul><div class="warning custom-block"><p class="custom-block-title">注意📢：</p><p>如果你为 <code>Watch</code> 操作指定一个不存在的命名空间，你将不会收到 <code>NotFound</code> 错误。</p><p>还要注意的是，如果你指定了过期的 <code>ResourceVersion</code>，你在调用 <code>Watch</code> 方法时不会收到错误，但会得到<code>ERROR</code>事件，其中包含 <code>metav1.Status</code> 对象，表示一个<code>Reason</code>的值 <code>metav1.StatusReasonExpired</code>。</p></div><p><code>metav1.Status</code> 是一个基础对象，用来构建使用客户集的调用所返回的错误。你将能够在 “错误和状态” 部分了解更多。</p><h2 id="错误和状态" tabindex="-1">错误和状态 <a class="header-anchor" href="#错误和状态" aria-label="Permalink to &quot;错误和状态&quot;">​</a></h2><p>如第一章所示，Kubernetes API 定义了 <code>Kinds</code> 来与调用者交换数据。目前，你应该考虑 <code>Kinds</code> 与资源有关，要么 <code>Kind</code> 有资源的单数名称（如Pod），要么 Kind 为资源列表（如PodList）。当一个 API 操作既没有返回资源也没有返回资源列表时，它使用一个普通的Kind，<code>metav1.Status</code>，来表示操作的状态。</p><h3 id="metav1-status结构体的定义" tabindex="-1"><code>metav1.Status</code>结构体的定义 <a class="header-anchor" href="#metav1-status结构体的定义" aria-label="Permalink to &quot;\`metav1.Status\`结构体的定义&quot;">​</a></h3><p><code>metav1.Status</code> 结构体的定义如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Status      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Message     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Reason      </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StatusReason</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Details     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StatusDetails</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Code        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>Status</code> - 这表示操作的状态，是 <code>metav1.StatusSuccess</code> 或 <code>metav1.StatusFailure</code>。</li><li><code>Message</code> - 这是对操作状态的自由形式的人类可读描述。</li><li><code>Code</code> - 这表示为操作返回的 HTTP 状态代码。</li><li><code>Reason</code>（原因）–这表示操作处于失败状态的原因。原因与给定的HTTP状态代码有关。定义的原因有：</li><li><code>StatusReasonBadRequest</code> (400) - 这个请求本身是无效的。这与 <code>StatusReasonInvalid</code> 不同，后者表明 API 调用可能成功，但数据无效。回复<code>StatusReasonBadRequest</code> 的请求永远不可能成功，无论数据如何。</li><li><code>StatusReasonUnauthorized</code> (401) - 授权凭证丢失、不完整或无效。</li><li><code>StatusReasonForbidden</code> (403) - 授权证书是有效的，但对资源的操作对这些证书是禁止的。</li><li><code>StatusReasonNotFound</code> (404) - 请求的资源或资源无法找到。</li><li><code>StatusReasonMethodNotAllowed</code> (405) - 在资源中请求的操作是不允许的，因为它没有实现。一个回复<code>StatusReasonMethodNotAllowed</code>的请求永远不会成功，不管是什么数据。</li><li><code>StatusReasonNotAcceptable</code> (406) - 客户端在 <code>Accept</code> 头中指出的接受类型都不可能。回复 <code>StatusReasonNotAcceptable</code> 的请求永远不会成功，无论数据如何。</li><li><code>StatusReasonAlreadyExists</code> (409) - 正在创建的资源已经存在。</li><li><code>StatusReasonConflict</code> (409) - 由于冲突，请求无法完成–例如，由于操作试图用旧的资源版本更新资源，或者由于删除操作中的前提条件没有被遵守。</li><li><code>StatusReasonGone</code> (410) - 项目已不再可用。</li><li><code>StatusReasonExpired</code> (410) - 内容已经过期，不再可用–例如，当用过期的资源版本执行<code>List</code>或<code>Watch</code>操作时。</li><li><code>StatusReasonRequestEntityTooLarge</code> (413) - 请求实体太大。</li><li><code>StatusReasonUnsupportedMediaType</code> (415) - 此资源不支持 <code>Content-Type</code> 标头中的内容类型。回复 <code>StatusReasonUnsupportedMediaType</code> 的请求永远不会成功，不管是什么数据。</li><li><code>StatusReasonInvalid</code> (422) - 为创建或更新操作发送的数据是无效的。<code>Causes</code>字段列举了数据的无效字段。</li><li><code>StatusReasonTooManyRequests</code> (429) - 客户端应该至少等待 <code>Details</code> 字段 <code>RetryAfterSeconds</code> 中指定的秒数，才能再次执行操作。</li><li><code>StatusReasonUnknown</code> (500) - 服务器没有指出任何失败的原因。</li><li><code>StatusReasonServerTimeout</code> (500) - 可以到达服务器并理解请求，但不能在合理时间内完成操作。客户端应该在 <code>Details</code> 字段 <code>RetryAfterSeconds</code> 中指定的秒数后重试该请求。</li><li><code>StatusReasonInternalError</code> (500) - 发生了一个内部错误；它是意料之外的，调用的结果是未知的。</li><li><code>StatusReasonServiceUnavailable</code> (503) - 请求是有效的，但是所请求的服务在这个时候不可用。一段时间后重试该请求可能会成功。</li><li><code>StatusReasonTimeout</code> (504) - 在请求中指定的超时时间内不能完成操作。如果指定了 <code>Details</code> 字段的<code>RetryAfterSeconds</code>字段，客户端应该在再次执行该操作之前等待这个秒数。</li></ul><p>Details – 这些可以包含更多关于原因的细节，取决于 <code>Reason</code> 字段。</p><p><code>Details</code> 字段的 <code>StatusDetails</code> 类型定义如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StatusDetails</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Kind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     UID </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Causes []</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StatusCause</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     RetryAfterSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果指定的话，<code>Name</code>、<code>Group</code>、<code>Kind</code> 和 UID 字段表明哪个资源受到了故障的影响。</p><p><code>RetryAfterSeconds</code> 字段，如果指定的话，表示客户端在再次执行操作之前应该等待多少秒。</p><p><code>Causes</code> 字段列举了失败的原因。当执行创建或更新操作导致 <code>StatusReasonInvalid</code> 原因的失败时，<code>Causes</code> 字段列举了无效的字段和每个字段的错误类型。</p><p><code>Causes</code> 字段的 <code>StatusCause</code> 类型定义如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StatusCause</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Type       </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CauseType</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Message    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Field      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="cllientset-操作返回的错误" tabindex="-1"><code>CllientSet</code> 操作返回的错误 <a class="header-anchor" href="#cllientset-操作返回的错误" aria-label="Permalink to &quot;\`CllientSet\` 操作返回的错误&quot;">​</a></h3><p>本章前面包含了对 <code>Clientset</code> 提供的各种操作的描述，这些操作一般会返回一个错误，你可以使用 <code>errors</code> 包中的函数来测试错误的原因–例如，用 <code>IsAlreadyExists</code> 这个函数。</p><p>这些错误的具体类型是 <code>errors.StatusError</code>，定义为：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StatusError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     ErrStatus </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">metav1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Status</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>可以看出，这个类型只包括本节前面已经探讨过的 <code>metav1.Status</code> 结构体。为这个 <code>StatusError</code> 类型提供了函数来访问底层的<code>Status</code>。</p><ul><li><code>Is&lt;ReasonValue&gt;(err error) bool</code> - 本节前面列举的每个 <code>Reason</code> 值都有一个，表示错误是否属于特定状态。</li><li><code>FromObject(obj runtime.Object) error</code> - 当你在 <code>Watch</code> 操作中接收到 <code>metav1.Status</code> 时，你可以用这个函数建立一个 <code>StatusError</code> 对象。</li><li><code>(e *StatusError) Status() metav1.Status</code> - 返回基础状态。</li><li><code>ReasonForError(err error) metav1.StatusReason</code> - 返回基础状态的原因。</li><li><code>HasStatusCause(err error, name metav1.CauseType) bool</code> - 这表明一个错误是否声明了一个特定的原因，并给出了<code>CauseType</code>。</li><li><code>StatusCause(err error, name metav1.CseType) (metav1.StatusCause, bool)</code> - 如果给定的<code>CauseType</code>存在，返回该原因，否则返回<code>false</code>。</li><li><code>SuggestsClientDelay(err error) (int, bool)</code> - 这表明错误是否在状态的<code>RetryAfterSeconds</code>字段中指示了一个值以及该值本身。</li></ul>`,104),p=[t];function l(h,k,d,o,c,E){return i(),a("div",null,p)}const y=s(n,[["render",l]]);export{g as __pageData,y as default};
