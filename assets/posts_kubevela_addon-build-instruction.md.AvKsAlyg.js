import{j as s,b as a,c as e,aa as i}from"./chunks/framework._Kr-eMMD.js";const g=JSON.parse('{"title":"Kubevela系列四：插件指南-轻松扩展你的平台专属能力","description":"","frontmatter":{"sidebar":false,"cover":"https://cdn.jsdelivr.net/gh/hyperter96/tech-blog/docs/assets/images/background4.jpeg","date":"2023-10-18T00:00:00.000Z","author":"姜洪烨","tag":["Kubevela","应用交付","kubernetes"],"sticky":1,"prev":{"text":"Kubevela系列三：Application Controller 源码分析(下)","link":"/posts/kubevela/application-controller-source-code-analysis-2"},"next":{"text":"Kubevela系列五：Kubevela集成多集群OCM","link":"/posts/kubevela/kubevela-integrate-multicluster-ocm"},"head":[]},"headers":[],"relativePath":"posts/kubevela/addon-build-instruction.md","filePath":"posts/kubevela/addon-build-instruction.md","lastUpdated":1712408366000}'),n={name:"posts/kubevela/addon-build-instruction.md"},t=i(`<h1 id="kubevela系列四-插件指南-轻松扩展你的平台专属能力" tabindex="-1">Kubevela系列四：插件指南-轻松扩展你的平台专属能力 <a class="header-anchor" href="#kubevela系列四-插件指南-轻松扩展你的平台专属能力" aria-label="Permalink to &quot;Kubevela系列四：插件指南-轻松扩展你的平台专属能力&quot;">​</a></h1><p>KubeVela 插件（addon）可以方便地扩展 KubeVela 的能力。正如我们所知，KubeVela 是一个微内核高度可扩展的平台，用户可以通过 <a href="https://kubevela.net/zh/docs/platform-engineers/oam/x-definition" target="_blank" rel="noreferrer">模块定义（Definition）</a>扩展 KubeVela 的系统能力，而 KubeVela 插件正是方便将这些<strong>自定义扩展</strong>及其<strong>依赖</strong>打包并分发的核心功能。不仅如此，KubeVela 社区的插件中心也在逐渐壮大，如今已经有超过 50 款插件，涵盖可观测性、微服务、FinOps、云资源、安全等大量场景功能。</p><p>这篇博客将会全方位介绍 KubeVela 插件的核心机制，教你如何编写一个自定义插件。在最后，我们将展示最终用户使用插件的体验，以及插件将如何融入到 KubeVela 平台，为用户提供一致的体验。</p><h2 id="为什么要使用-kubevela-插件" tabindex="-1">为什么要使用 KubeVela 插件 <a class="header-anchor" href="#为什么要使用-kubevela-插件" aria-label="Permalink to &quot;为什么要使用 KubeVela 插件&quot;">​</a></h2><p>用户使用插件的一个典型方法是通过 KubeVela 团队维护的 <a href="https://github.com/kubevela/catalog" target="_blank" rel="noreferrer">插件中心（addon catalog）</a> ，它包含了 KubeVela 团队与社区开发者精心编写的系统扩展功能，并以插件的形式发布于插件中心，这样你可以一键下载并安装这些插件。例如安装 FluxCD 可以快速给你的 KubeVela Application 提供部署 Helm Chart 的能力。</p><p>相较于使用 KubeVela 的插件功能，如果你自己的内部平台想要集成一个云原生的功能，你大概会这么做：</p><ol><li>通过 Helm Chart 或者下载 yaml 文件手动安装 FluxCD 或类似的 CRD Operator。</li><li>编写系统集成的代码，让用户界面可以通过统一的方式使用 FluxCD 等 CRD 的功能，在 KubeVela 系统中就是通过编写模块定义（OAM Definition）完成。</li></ol><p>实际上，在 KubeVela 1.1 版本之前，我们也是通过类似的方式完成的。这会带来如下问题：</p><ol><li><strong>操作繁琐</strong>：用户需要手动查阅文档如何安装 FluxCD 并处理可能发生的错误</li><li><strong>资源分散</strong>：用户需要下载不同的文件，既需要安装 Helm 安装 FluxCD 还需要下载模块定义等系统扩展的集成配置</li><li><strong>难以分发复用</strong>：用户需要手动下载模块定义就注定了这些资源难以以一个统一的方式分发给用户，也无法形成社区生态让不同的用户可以享受社区便利</li><li><strong>缺少多集群支持</strong>：KubeVela 将多集群交付作为一等公民，而这样的手动安装系统扩展的方式显然难以维护多集群的环境</li><li><strong>无版本管理</strong>：用户需要手动管理模块定义和 Controller 之间的版本</li></ol><p>而 KubeVela 插件就是为了逐一解决这些问题而诞生的。</p><h2 id="kubevela-插件是如何工作的" tabindex="-1">KubeVela 插件是如何工作的 <a class="header-anchor" href="#kubevela-插件是如何工作的" aria-label="Permalink to &quot;KubeVela 插件是如何工作的&quot;">​</a></h2><p>KubeVela 的插件主要包含两部分：</p><ul><li>一部分是安装能力的提供者，通常是一个 CRD Operator/Controller。这个<strong>安装过程实质上就是运行一个 OAM 应用</strong>，addon 交付中所使用的功能与普通应用能力完全等价。</li><li>另一部分就是扩展能力跟 KubeVela 体系的粘合层，也就是模块定义和其他的一些集成配置。OAM 模块定义为用户提供了插件扩展出的组件、运维特征以及工作流步骤等功能，也帮助 CRD Operator 提供用户友好的抽象，使得最终用户无需理解复杂的 CRD 参数，只需要根据最佳实践提供必要的参数。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/hyperter96/tech-blog/docs/assets/images/addon-mechanism.jpg" alt="" loading="lazy"></p><p>插件的工作机制如上图所示，KubeVela 的应用具备多集群交付的能力，所以也能帮助插件中的 CRD Operator 部署到这些集群中。模块定义文件仅需要在控制面被 KubeVela 使用，所以无需部署到被管控的集群中。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>一旦插件被安装，就会创建一个 KubeVela 应用，包含所有的相关资源和配置，这些配置都会设置 KubeVela 应用对外作为 <code>OwnerReference</code>（父节点）。当我们想要卸载一个插件时，只需要删除这个应用，Kubernetes 提供的资源回收机制会自动将标记了 <code>OwnerReference</code> 的资源一并删除。</p></div><p>例如一个 Redis 插件，它能让用户在自己的应用中使用 Redis 集群类型的组件（Component），这样可以快速创建 Redis 集群。那么这个插件至少会包括一个 Redis Operator 来提供创建 Redis 集群的能力（通过 Application 描述），还有一个组件的模块定义 （<code>ComponentDefinition</code>） 来提供 Redis 集群的组件类型。</p><p>所有整个插件的安装过程会将 Redis Operator 放在一个 KubeVela 应用中下发到多集群，而组件定义和 UI 扩展等配置文件则只部署到控制面集群并设置应用对象为 <code>OwnerReference</code>。</p><h2 id="创建自己的插件" tabindex="-1">创建自己的插件 <a class="header-anchor" href="#创建自己的插件" aria-label="Permalink to &quot;创建自己的插件&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>为保证以下内容功能全部可用，请确保你的 KubeVela 版本 为 v1.5+。</p></div><p>我们将以 Redis 插件为例，讲解如何从头创建一个 KubeVela 插件的实际过程。本次完整的 Redis 插件代码见 <a href="https://github.com/kubevela/catalog/tree/master/experimental/addons/redis-operator" target="_blank" rel="noreferrer">catalog/redis-operator</a>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在这里我们会尽可能全面的介绍制作插件中涉及的核心知识，但是作为一个介绍性博客，我们会尽量避免讨论过深的细节以免篇幅过于膨胀，了解完整的功能及细节可以参考<a href="https://kubevela.net/zh/docs/platform-engineers/addon/intro" target="_blank" rel="noreferrer">自定义插件文档</a>。</p></div><p><strong>首先我们需要思考我们要创建的插件有什么作用？</strong> 例如我们假设 Redis 插件可以提供 <code>redis-failover</code> 类型的 Component，这样用户只需在 Application 中定义一个 <code>redis-failover</code> Component 即可快速创建 Redis 集群。</p><p><strong>然后考虑如何达到这个目的？</strong> 要提供 <code>redis-failover</code> 类型的 Component 我们需要定义一个 <code>ComponentDefinition</code> ；要提供创建 Redis 集群的能力支持，我们可以使用 <a href="https://github.com/spotahome/redis-operator" target="_blank" rel="noreferrer">Redis Operator</a> 。</p><p>那至此我们的大目标就明确了：</p><ul><li>编写插件的应用描述文件（OAM Application），这将会用于安装 Redis Operator （完整代码可以到插件中心的<a href="https://github.com/kubevela/catalog/blob/master/experimental/addons/redis-operator/template.cue" target="_blank" rel="noreferrer"><code>template.cue</code></a> 及 <a href="https://github.com/kubevela/catalog/tree/master/experimental/addons/redis-operator/resources" target="_blank" rel="noreferrer"><code>resources/</code></a> 目录查看。）</li><li>编写 <code>redis-failover</code> 类型的 <a href="https://kubevela.net/zh/docs/platform-engineers/components/custom-component" target="_blank" rel="noreferrer">ComponentDefinition</a> （完整代码请查看 <a href="https://github.com/kubevela/catalog/tree/master/experimental/addons/redis-operator/definitions" target="_blank" rel="noreferrer"><code>definitions/</code> 目录</a>）</li></ul><p>不过在开始编写之前，我们首先需要了解一个 KubeVela 插件的目录结构。后续我们会在编写的过程中详细说明每个文件的作用，在这里只需大致了解有哪些文件即可。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>命令行工具 <code>vela addon init</code> 可以帮助你创建目录结构的初始化脚手架。</p></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-operator/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> definitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis-failover.cue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> crd.yaml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis-operator.cue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> topology.cue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> metadata.yaml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> parameter.cue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> README.md</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> template.cue</span></span></code></pre></div><p>让我们逐一来解释它们：</p><ol><li><code>redis-operator/</code> 是目录名，同时也是插件名称，请保持一致。</li><li><code>definitions/</code> 用于存放模块定义, 例如 <code>TraitDefinition</code> 和 <code>ComponentDefinition</code>。</li><li><code>redis-failover.cue</code> 定义我们编写的 <code>redis-failover</code> 组件类型，包含了用户如何使用这个组件的参数以及这个组件与底层资源交互的细节。</li><li><code>resources/</code> 用于存放资源文件, 之后会在 <code>template.cue</code> 中使用他们共同组成一个 KubeVela 应用来部署插件。</li><li><code>crd.yaml</code> 是 Redis Operator 的 Kubernetes 自定义资源定义，在 <code>resources/</code> 文件夹中的 YAML 文件会被直接部署到集群中。</li><li><code>redis-operator.cue</code> 一个 <code>web-service</code> 类型的 Component ，用于安装 Redis Operator。</li><li><code>topology.cue</code> 是可选的，帮助 KubeVela 建立应用所纳管资源的拓扑关系。</li><li><code>metadata.yaml</code> 是插件的元数据，包含插件名称、版本、维护人等，为插件中心提供了概览信息。</li><li><code>parameter.cue</code> 插件参数定义，用户可以利用这些参数在插件安装时做轻量级自定义。</li><li><code>README.md</code> 提供给最终用户阅读，包含插件使用指南等。</li><li><code>template.cue</code> 定义插件最终部署时的完整应用形态，包含一个 OAM 应用模板以及对其他资源对象的引用。</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在插件中制作中我们会广泛使用 CUE 语言来编排配置，如果对 CUE 不熟悉，可以花 10 分钟快速查阅<a href="https://kubevela.net/zh/docs/platform-engineers/cue/basic" target="_blank" rel="noreferrer">入门指南</a>有一个基本了解。</p></div><h3 id="parameter-cue" tabindex="-1"><code>parameter.cue</code> <a class="header-anchor" href="#parameter-cue" aria-label="Permalink to &quot;\`parameter.cue\`&quot;">​</a></h3><div class="language-cue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parameter: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//+usage=Redis Operator image.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	image: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;quay.io/spotahome/redis-operator:v1.1.0&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 其余省略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 <code>parameter.cue</code> 中定义的参数都是用户可以自定义的（类似于 Helm Values），后续在 <code>template.cue</code> 或者 <code>resources</code> 中可以通过 <code>parameter.&lt;parameter-name&gt;</code> 访问参数。在我们的例子中，用户可以自定义 <code>image</code> ，这样后续我们创建 Redis Operator (<code>redis-operator.cue</code>) 的时候可以通过 <code>parameter.image</code> 使用用户指定的容器镜像。</p><p>参数不仅可以给用户预留安装时的自定义输入，还可以作为安装时的条件进行部分安装。比如 <code>fluxcd</code> 插件有一个参数叫 <a href="https://github.com/kubevela/catalog/blob/master/addons/fluxcd/parameter.cue" target="_blank" rel="noreferrer"><code>onlyHelmComponents</code></a>，它的作用就是可以帮助用户只部署用于安装 Helm Chart 的组件能力，而其他控制器就可以不安装。如果你对于实现细节感兴趣，可以参考fluxcd 插件的 <a href="https://github.com/kubevela/catalog/blob/master/addons/fluxcd/template.cue#L25" target="_blank" rel="noreferrer">这部分配置</a>.</p><p>在设计提供什么参数供用户自定义插件安装时，我们也应该遵循一下这些最佳实践来为用户提供更好的使用体验。</p><div class="tip custom-block"><p class="custom-block-title">最佳实践</p><ul><li>不要在 <code>parameter.cue</code> 中提供大量的细节参数，将大量细节抽象出少量参数供用户调节是一个更好的做法</li><li>为参数提供默认值（如样例中的 <code>image</code> 参数）或将参数标记为可选（如样例的 <code>clusters</code> 参数），确保用户仅使用默认值可以得到一个可用的配置</li><li>为参数提供使用说明（通过注释标记实现，见样例）</li><li>尽量保持插件不同版本间的参数一致，防止因为升级导致不兼容</li></ul></div><h3 id="template-cue-和-resources-目录" tabindex="-1"><code>template.cue</code> 和 <code>resources/</code> 目录 <a class="header-anchor" href="#template-cue-和-resources-目录" aria-label="Permalink to &quot;\`template.cue\` 和 \`resources/\` 目录&quot;">​</a></h3><p>这是存放我们应用描述文件的地方，即一个 OAM Application 。这描述了实际的插件安装过程。我们主要会在这里包含 Redis Operator ，给集群提供管理 Redis 集群的能力。</p><p><code>template.cue</code> 和 <code>resources/</code> 目录本质上是相同的，都是构成 KubeVela 应用的组成部分，且都是在同一个 package 下的 CUE 文件。</p><p>那为什么需要 <code>resources</code> 目录呢？除去历史原因，这主要是为了可读性的考虑，在 Application 中包含大量资源的时候 <code>template.cue</code> 可能变得很长，这时我们可以把资源放置在 <code>resource</code> 中增加可读性。一般来说，我们将 Application 的框架放在 <code>template.cue</code> 中，将 Application 内部的 Components、Traits 等信息放在 <code>resource</code> 目录中。</p><h4 id="template-cue" tabindex="-1">template.cue <a class="header-anchor" href="#template-cue" aria-label="Permalink to &quot;template.cue&quot;">​</a></h4><p><code>template.cue</code> 定义了应用的框架，绝大多数内容都是固定写法，具体的作用可以参考代码块中的注释。</p><div class="language-cue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// template.cue 应用描述文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package 名称需要与 resources 目录中 cue 的 package 一致，方便引用 resources 目录中的内容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Application 模板中多数字段均为固定写法，你需要注意的只有 spec.components</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 这是一个经典的 OAM Application</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	apiVersion: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;core.oam.dev/v1beta1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	kind:       </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Application&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 不需要 metadata</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	spec: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		components: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 创建 Redis Operator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			redisOperator </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义于 resources/redis-operator.cue 中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		policies: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 这里会指定安装插件的 namespace ，是否安装至子集群等</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 多为固定写法，无需记忆，可查阅本次样例的完整代码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// https://github.com/kubevela/catalog/blob/master/experimental/addons/redis-operator/template.cue</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 文档可参照 https://kubevela.net/zh/docs/end-user/policies/references</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义资源关联规则，用于将资源粘合在一起。后续会着重介绍</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Documentation: https://kubevela.net/zh/docs/reference/topology-rule</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">outputs: topology: resourceTopology </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义于 resources/topology.cue 中</span></span></code></pre></div><p>在插件安装时，系统主要关注两个关键字：</p><ul><li>一是 <code>output</code> 字段，定义了插件对应的应用，在应用内部 <code>spec.components</code> 定义了部署的组件，在我们的例子中引用了存放在 <code>resources/</code> 目录中的 <code>redisOperator</code> 组件。output 中的 Application 对象不是严格的 Kubernetes 对象，其中 <code>metadata</code> 里的内容（主要是插件名称）会被插件安装的过程自动注入。</li><li>另一个是 <code>outputs</code> 字段，定义了除了常规应用之外的配置，任何你想要跟插件一同部署的额外 Kubernetes 对象都可以定义在这里。请注意 outputs 中的这些对象必须遵循 Kubernetes API。</li></ul><h4 id="resources-资源文件" tabindex="-1"><code>resources/</code> 资源文件 <a class="header-anchor" href="#resources-资源文件" aria-label="Permalink to &quot;\`resources/\` 资源文件&quot;">​</a></h4><p>我们这里使用一个 <code>webservice</code> 类型的 Component 来安装 Redis Operator。当然，如果你可以接受依赖 FluxCD 的话，你也可以使用 <code>helm</code> 类型的 Component 直接安装一个 Helm Chart（因为 <code>helm</code> 类型的 Component 主要由 FluxCD 插件提供）。不过编写 addon 的一个原则是尽量减少外部依赖，所以我们这里使用 KubeVela 内置的 <code>webservice</code> 类型，而不是 <code>helm</code>。</p><div class="language-cue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// resources/redis-operator.cue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package 名称与 template.cue 一致，方便在 template.cue 中引用以下的 redisOperator</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redisOperator: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 这是 OAM Application 中的 Component ，它将会创建一个 Redis Operator</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// https://kubevela.net/zh/docs/end-user/components/references</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;redis-operator&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webservice&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	properties: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// Redis Operator 镜像名称，parameter.image 即在 parameter.cue 中用户可自定义的参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		image:           parameter.image</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		imagePullPolicy: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;IfNotPresent&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	traits: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以阅读代码块中的注释了解字段的具体作用。</p><h4 id="kubevela-提供的资源粘合能力" tabindex="-1">KubeVela 提供的资源粘合能力 <a class="header-anchor" href="#kubevela-提供的资源粘合能力" aria-label="Permalink to &quot;KubeVela 提供的资源粘合能力&quot;">​</a></h4><p>值得注意的一个功能是 <a href="https://kubevela.net/zh/docs/reference/topology-rule" target="_blank" rel="noreferrer"><em>资源关联规则 (Resource Topology)</em></a> 。虽然它不是必须的，但是它能帮助 KubeVela 建立应用所纳管资源的拓扑关系。这就是 KubeVela 如何将各种各样的资源粘合成 Application 的。这在我们使用 Kubernetes 自定义资源（CR）的时候特别有用。</p><div class="language-cue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// resources/topology.cue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;encoding/json&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resourceTopology: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	apiVersion: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	kind:       </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ConfigMap&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	metadata: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		name:      </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;redis-operator-topology&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		namespace: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vela-system&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		labels: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">			&quot;rules.oam.dev/resources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:       </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">			&quot;rules.oam.dev/resource-format&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	data: rules: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Marshal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		parentResourceType: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			group: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;databases.spotahome.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			kind:  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RedisFailover&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// RedisFailover CR 会创建以下三类资源</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		childrenResourceType: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				apiVersion: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;apps/v1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				kind:  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;StatefulSet&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			},</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// KubeVela 内置 Deployment 等资源的拓扑，因此无需继续向下编写</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				apiVersion: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;apps/v1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				kind:  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Deployment&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				apiVersion: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				kind:  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Service&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在本例中，<code>redis-failover</code> 类型的 Component 会创建一个 CR ，名为 RedisFailover 。但是在没有资源关联规则的情况下，假设在你的 Application 中使用了 RedisFailover ，虽然我们知道 RedisFailover 管控了数个 Redis Deployment ，但是 KubeVela 并不知道 RedisFailover 之下有 Deployment 。这时我们可以通过 <em>资源关联规则</em> 将我们对于 RedisFailover 的了解<em>告诉</em> KubeVela，这样 KubeVela 可以帮助我们建立起整个应用下面纳管资源的拓扑层级关系。此时你将获得 KubeVela 提供的许多有用功能，效果见 <a href="#运行插件">运行插件</a>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>资源的拓扑关联功能给我们带来了许多有用的功能，最重要的是为 KubeVela 最终用户使用扩展能力提供了统一体验：</p><ul><li>VelaUX 资源拓扑视图，从应用到底层资源 Pod 的关联关系一应俱全，包括多集群</li><li>统一的 <code>vela exec</code> 命令可以在不同应用组件类型关联的底层容器中执行命令，包括多集群</li><li>统一的 <code>vela port-forward</code> 转发不同类型应用组件关联的底层容器端口，包括多集群</li><li>统一的 <code>vela log</code> 查看不同类型应用组件关联的底层容器日志，包括多集群</li><li>统一的 <code>vela status --pod/--endpoint</code> 查看不同类型应用组件关联的底层容器日志，获得可供访问的地址等，包括多集群</li></ul></div><h3 id="definitions-目录" tabindex="-1"><code>definitions/</code> 目录 <a class="header-anchor" href="#definitions-目录" aria-label="Permalink to &quot;\`definitions/\` 目录&quot;">​</a></h3><p>Definitions 目录存放 KubeVela <a href="https://kubevela.io/docs/getting-started/definition" target="_blank" rel="noreferrer">模块定义（Definition）</a>，包括组件定义（<code>ComponentDefinition</code>）、策略定义（<code>TraitDefinition</code>）等。**这是插件中最重要的部分，因为它包含了最终用户安装这个插件以后可以获得哪些功能。**有了这里定义的组件、运维特征、工作流等类型，最终用户就可以在应用中使用他们了。</p><p>在插件中编写模块定义跟常规的编写流程一致，这是一个很大的话题，在这里我们就不详细展开了。你可以通过阅读模块定义对应的文档了解其中的细节：</p><ul><li><a href="https://kubevela.io/docs/platform-engineers/components/custom-component" target="_blank" rel="noreferrer">自定义组件 Component Definition</a></li><li><a href="https://kubevela.io/docs/platform-engineers/traits/customize-trait" target="_blank" rel="noreferrer">自定义运维特征 Trait Definition</a></li><li><a href="https://kubevela.io/docs/platform-engineers/policy/custom-policy" target="_blank" rel="noreferrer">自定义策略 Policy Definition</a></li><li><a href="https://kubevela.io/docs/platform-engineers/workflow/workflow" target="_blank" rel="noreferrer">自定义工作流步骤 Workflow Step Definition</a>。</li></ul><p>在本例中，我们编写 Redis 组件类型主要参照 <a href="https://kubevela.net/zh/docs/platform-engineers/components/custom-component" target="_blank" rel="noreferrer">自定义组件</a> 与 <a href="https://github.com/spotahome/redis-operator/blob/master/README.md" target="_blank" rel="noreferrer">Redis Operator 使用文档</a> ，我们将组件类型命名为 <code>redis-failover</code>，它会创建一个 RedisFailover 的 CR ，这样刚刚添加的 Redis Operator 就可以帮助创建 Redis 集群，见<a href="https://github.com/kubevela/catalog/blob/master/experimental/addons/redis-operator/definitions/redis-failover.cue" target="_blank" rel="noreferrer">完整代码</a>。</p><h3 id="metadata-yaml" tabindex="-1"><code>metadata.yaml</code> <a class="header-anchor" href="#metadata-yaml" aria-label="Permalink to &quot;\`metadata.yaml\`&quot;">​</a></h3><p>这里包含了插件的元数据，即插件的名称、版本、系统要求等，可以参考<a href="https://kubevela.net/zh/docs/platform-engineers/addon/intro#%E6%8F%92%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%E6%96%87%E4%BB%B6" target="_blank" rel="noreferrer">文档</a>。需要注意的是，本次介绍的为 KubeVela v1.5 之后的新写法，因此需要避免使用某些不兼容的元数据字段，以下样例中包含了所有的可用元数据。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>例如传统的 <code>deployTo.runtimeCluster</code> （安装至子集群）等元数据在新写法中已有代替（使用 topology Policy），应当使用新写法。可见完整代码中的 <a href="https://github.com/kubevela/catalog/blob/958a770a9adb3268e56ca4ec2ce99d2763617b15/experimental/addons/redis-operator/template.cue#L28" target="_blank" rel="noreferrer"><code>template.cue</code></a></p></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 插件名称，与目录名一致</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">redis-operator</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 插件描述</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Redis Operator creates/configures/manages high availability redis with sentinel automatic failover atop Kubernetes.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 展示用标签</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">redis</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 插件版本</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0.1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 展示用图标</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">icon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://xxx.com</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 插件所包含项目的官网地址</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://github.com/spotahome/redis-operator</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 可能依赖的其他插件，例如 fluxcd</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 系统版本要求</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">system</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  vela</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=v1.5.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  kubernetes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=1.19&quot;</span></span></code></pre></div><h2 id="运行插件" tabindex="-1">运行插件 <a class="header-anchor" href="#运行插件" aria-label="Permalink to &quot;运行插件&quot;">​</a></h2><p>至此我们已经将插件的主要部分编写完成，下载 <a href="https://github.com/kubevela/catalog/tree/master/experimental/addons/redis-operator" target="_blank" rel="noreferrer">完整代码</a> 补全部分细节后，即可尝试运行。</p><p>下载得到 redis-operator 目录后，我们可以通过 <code>vela addon enable redis-operator</code> 安装本地的 <code>redis-operator</code> 插件，这种本地安装插件的方式也可以方便你再制作时做一些调试。</p><p>安装完成后就可以参考插件的 <a href="https://github.com/kubevela/catalog/tree/master/experimental/addons/redis-operator/README.md" target="_blank" rel="noreferrer">README</a> 试用我们的 Redis 插件了！</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这里也体现出插件的 README 的重要性，其中需要包括插件的作用、详细使用指南等，确保用户可以快速上手。</p></div><p>在用户使用你编写的插件时，只需如下 <strong>4</strong> 行 yaml 即可在 Application 中创建包含 3 个 Node 的高可用 Redis 集群！相比于手动安装 Redis Operator 并创建 CR ，甚至逐一手动配置 Redis 集群，插件的方式极大地方便了用户。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">core.oam.dev/v1beta1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Application</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">redis-operator-sample</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  components</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # This component is provided by redis-operator addon.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # In this example, 2 redis instance and 2 sentinel instance</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # will be created.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">redis-failover</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ha-redis</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # You can increase/decrease this later to add/remove instances.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        replicas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span></code></pre></div><p>只需 apply 仅仅数行的 yaml 文件，我们就轻松创建了如下图所示的整个复杂的资源。并且由于我们编写了 <em>资源关联规则 (Resource Topology)</em> ，用户可以通过 VelaUX 轻松获得刚刚创建的 Redis 集群的资源拓扑状态，了解 Application 底层资源的运行状况，不再受限于 Application Component 级别的可观测性。如图我们能直接观测到整个 Application 的拓扑，直至每个 Redis Pod ，可见图中部分 Pod 仍在准备中：</p><p><img src="https://cdn.jsdelivr.net/gh/hyperter96/tech-blog/docs/assets/images/redis-operator-sample-topology-graph.png" alt="redis-operator-sample-topology-graph" loading="lazy"></p><p>在执行 <code>vela exec/log/port-forward</code> 等命令时也可以精确地看到 Application 底层包含的资源（即支撑 Redis 集群的 3 个 Redis Pod 和 3 个 Sentinel Pod）。</p><p><img src="https://cdn.jsdelivr.net/gh/hyperter96/tech-blog/docs/assets/images/redis-operator-sample-pod-topology.png" alt="redis-operator-sample-pod-topology" loading="lazy"></p><p>::: 如果你在使用单集群，乍一看你可能不会觉得 exec 进一个 Pod 是很特殊的功能。但是一旦考虑到多集群，能够在横跨多个集群的资源中跟单集群一样以统一的方式进行选择查看能够极大的节省时间。 :::</p><p>使用 <code>vela status</code> 命令能获取这个 Application 的运行状态，有了资源关联规则后可以更进一步，直接通过 vela 寻找出 Redis Sentinel 的 Endpoint 来访问 Redis 集群：</p><p><img src="https://cdn.jsdelivr.net/gh/hyperter96/tech-blog/docs/assets/images/redis-operator-sample-endpoint.png" alt="redis-operator-sample-endpoint" loading="lazy"></p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>通过本文，相信你已经了解插件的作用及制作插件的要点。通过插件体系，我们将获得如下优势：</p><ol><li>将平台的能力打包成一个易于安装、便于分发复用、且可以形成社区生态的插件市场。</li><li>充分复用 CUE 和 KubeVela 应用通过的强大能力，将基础设施资源灵活定义并进行多集群分发。</li><li>无论扩展的资源类型是什么，均可以接入应用体系，为最终用户提供一致的体验。</li></ol><p>最后，如果你成功制作了属于自己的插件，KubeVela 社区非常欢迎开发者贡献插件至 <a href="https://github.com/kubevela/catalog" target="_blank" rel="noreferrer">插件中心</a> ，这样你的插件还能够被其他 KubeVela 社区用户发现并使用！</p>`,83),l=[t];function p(r,o,h,k,d,c){return a(),e("div",null,l)}const u=s(n,[["render",p]]);export{g as __pageData,u as default};
