import{_ as s,c as i,o as a,a7 as n}from"./chunks/framework.B28k8k1F.js";const o=JSON.parse('{"title":"基于KEDA事件驱动的AML规则引擎架构设计","description":"","frontmatter":{"sidebar":false,"cover":"https://cdn.jsdelivr.net/gh/hyperter96/tech-blog/docs/assets/images/algorithm-1.jpeg","date":"2024-12-19T00:00:00.000Z","sticky":1,"tags":["网络安全","AML"],"prev":{"text":"AML规则探索","link":"/posts/cyberSecurity/rule-based"},"next":{"text":"基于WOE和IV的网络流量特征分析","link":"/posts/cyberSecurity/analysis-network-traffic-characteristics"},"head":[]},"headers":[],"relativePath":"posts/cyberSecurity/aml/keda-rule-infra.md","filePath":"posts/cyberSecurity/aml/keda-rule-infra.md","lastUpdated":1739612366000}'),l={name:"posts/cyberSecurity/aml/keda-rule-infra.md"},p=n(`<h1 id="基于keda事件驱动的aml规则引擎架构设计" tabindex="-1">基于KEDA事件驱动的AML规则引擎架构设计 <a class="header-anchor" href="#基于keda事件驱动的aml规则引擎架构设计" aria-label="Permalink to &quot;基于KEDA事件驱动的AML规则引擎架构设计&quot;">​</a></h1><h2 id="keda事件驱动机制" tabindex="-1">KEDA事件驱动机制 <a class="header-anchor" href="#keda事件驱动机制" aria-label="Permalink to &quot;KEDA事件驱动机制&quot;">​</a></h2><p>使用 KEDA (Kubernetes Event-driven Autoscaling) 事件驱动机制来触发 AML (Anti-Money Laundering) 规则引擎的自适应调整，是一个高效的方式，可以实现根据实时区块链数据和市场活动的变化自动调整反洗钱策略。KEDA 允许你基于事件的到来自动扩展应用程序实例或调整其行为，非常适合处理动态变化的环境。</p><h3 id="整体架构设计" tabindex="-1">整体架构设计 <a class="header-anchor" href="#整体架构设计" aria-label="Permalink to &quot;整体架构设计&quot;">​</a></h3><ul><li>KEDA 事件驱动机制：KEDA 支持多种事件源（如消息队列、数据库变化、HTTP 请求等），可以用于根据外部事件自动触发规则引擎的调整。</li><li>AML 规则引擎：AML 规则引擎是一个实时监控、检测和应对洗钱行为的系统，它基于区块链的交易数据和市场动态调整检测规则，并执行风险评分和警报。</li><li>Kubernetes 集群：所有的服务都运行在 Kubernetes 集群中，KEDA 会根据预设的事件源自动伸缩或者触发规则引擎进行自适应调整。</li></ul><h3 id="具体实现步骤" tabindex="-1">具体实现步骤 <a class="header-anchor" href="#具体实现步骤" aria-label="Permalink to &quot;具体实现步骤&quot;">​</a></h3><h4 id="keda-配置和事件源定义" tabindex="-1">KEDA 配置和事件源定义 <a class="header-anchor" href="#keda-配置和事件源定义" aria-label="Permalink to &quot;KEDA 配置和事件源定义&quot;">​</a></h4><p>首先，你需要定义 KEDA 的事件源和触发条件。例如，KEDA 可以通过 Kafka、Azure Event Hub、Redis 等事件源触发，甚至是通过 Webhook。</p><p>假设我们使用 Kafka 作为事件源来捕捉交易数据或者某些规则的触发事件（例如区块链地址标记或交易行为达到某个阈值）。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">keda.sh/v1alpha1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ScaledObject</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">aml-rule-engine-scaler</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  scaleTargetRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">aml-rule-engine</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  triggers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">kafka</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        bootstrapServers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kafka-broker:9092&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        topic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aml-events&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        consumerGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aml-group&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        lagThreshold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;100&quot;</span></span></code></pre></div><p>在这个例子中，KEDA 将监控 Kafka 的 <code>aml-events</code> 主题，当消息队列中的滞后量超过 <code>100</code> 时，触发对 <code>aml-rule-engine</code> 服务进行自动扩展或调整。</p><h4 id="aml-规则引擎自适应调整机制" tabindex="-1">AML 规则引擎自适应调整机制 <a class="header-anchor" href="#aml-规则引擎自适应调整机制" aria-label="Permalink to &quot;AML 规则引擎自适应调整机制&quot;">​</a></h4><p>AML 规则引擎应能够根据外部事件（如新的交易数据，或某些行为模式的检测结果）自适应调整。例如，KEDA 触发时，AML 引擎可能需要调整其规则、阈值，或者增加计算能力来处理更多的高风险数据。</p><p>实现自适应调整的关键点：</p><ul><li>规则动态调整：基于外部事件（例如交易量急剧变化，或与高风险地址的交易增多），动态调整反洗钱检测规则。这可以通过自动化脚本、配置文件或数据库表来实现。</li><li>扩展计算资源：根据实时交易数据的增量调整计算资源。例如，交易数据的爆发性增长可能会导致规则引擎需要更多的计算能力，此时可以通过 KEDA 动态扩展计算节点或容器实例。</li></ul><p>示例：AML 引擎自适应调整算法</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 假设这是一个监听 Kafka 消息并触发自适应调整的 Go 程序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onAmlEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AmlEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.Type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;TRANSACTION_VOLUME_INCREASE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 调整规则引擎的策略</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        adjustAmlRulesBasedOnVolume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.Type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;RISK_SCORE_ALERT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 动态调整风险评分阈值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        adjustRiskScoreThreshold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 根据交易量增大调整规则引擎的检测策略</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> adjustAmlRulesBasedOnVolume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AmlEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 更新规则配置，例如，减小某些规则的检测阈值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    amlConfig.RiskThreshold </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amlConfig.RiskThreshold </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.9</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    updateAmlConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(amlConfig)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 根据风险评分警报调整阈值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> adjustRiskScoreThreshold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AmlEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    amlConfig.RiskScoreThreshold </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amlConfig.RiskScoreThreshold </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    updateAmlConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(amlConfig)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在此示例中，<code>onAmlEvent</code> 会根据 Kafka 中的不同事件类型来动态调整规则引擎的配置。这可以触发对检测规则和风险评分阈值的自动调整，从而提升系统的敏感性。</p><h4 id="keda-与-aml-引擎集成" tabindex="-1">KEDA 与 AML 引擎集成 <a class="header-anchor" href="#keda-与-aml-引擎集成" aria-label="Permalink to &quot;KEDA 与 AML 引擎集成&quot;">​</a></h4><p>通过将 KEDA 的伸缩功能与 AML 引擎的规则引擎结合，你可以实现基于外部事件的自动伸缩和自适应调整。例如，当大量高风险交易数据进入时，KEDA 可以自动增加规则引擎实例，以便更高效地处理这些数据，避免丢失潜在的风险信号。</p><p>KEDA 扩展时，你的规则引擎实例会增加处理能力；当事件减少时，规则引擎实例会自动缩减，以节省资源。</p><h4 id="部署与监控" tabindex="-1">部署与监控 <a class="header-anchor" href="#部署与监控" aria-label="Permalink to &quot;部署与监控&quot;">​</a></h4><p>你需要监控 KEDA 和 AML 规则引擎的运行状态，以确保规则引擎的扩展或调整没有引发性能瓶颈或出现资源浪费。</p><ul><li>KEDA Metrics：KEDA 提供监控指标，可以通过 Prometheus 等工具进行监控，确保事件触发的频率和伸缩的响应时间合适。</li><li>AML 规则引擎监控：确保规则引擎的响应时间、风险评分和检测的准确性满足反洗钱的需求。</li></ul><h4 id="流程总结" tabindex="-1">流程总结 <a class="header-anchor" href="#流程总结" aria-label="Permalink to &quot;流程总结&quot;">​</a></h4><p>KEDA 监控事件源：KEDA 监听来自外部事件源（如 Kafka）的数据变化，例如新的交易数据或风控报警。 触发规则引擎自适应调整：当 KEDA 触发事件时，AML 规则引擎根据事件数据（如交易量激增、风险分数警报等）调整检测规则和阈值。 自动扩展计算资源：根据事件的到来，KEDA 自动扩展或缩减规则引擎的计算资源，确保系统能够实时应对变化的需求。</p><h2 id="如何通过规则触发外部事件" tabindex="-1">如何通过规则触发外部事件 <a class="header-anchor" href="#如何通过规则触发外部事件" aria-label="Permalink to &quot;如何通过规则触发外部事件&quot;">​</a></h2><p>KEDA 的事件源（如 Kafka、Azure Event Hub、消息队列等）本身并不直接知道“什么事件”需要触发，它们只是从外部环境中接收数据。因此，事件的产生通常需要通过以下步骤来触发：</p><h3 id="aml-规则引擎监控与事件生成" tabindex="-1">AML 规则引擎监控与事件生成 <a class="header-anchor" href="#aml-规则引擎监控与事件生成" aria-label="Permalink to &quot;AML 规则引擎监控与事件生成&quot;">​</a></h3><p>AML 规则引擎会实时监控交易数据，并根据一些预设的规则（如交易量、地址行为、与高风险地址的交互等）来识别潜在的风险活动。当某些规则触发时，应该将其转化为可供 KEDA 监控的事件。</p><p>例如，当某个区块链地址的交易量异常，或者频繁与已知的高风险地址进行交易时，可以通过以下逻辑触发一个事件：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// AML 规则引擎生成风险事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checkTransactionRisk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">transaction</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Transaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isHighRisk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transaction) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createAmlEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RISK_ALERT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, transaction.Address, transaction.Amount)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        triggerEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个 AML 风险警报事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createAmlEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">eventType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">amount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AmlEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AmlEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Type:    eventType,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Address: address,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Amount:  amount,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Time:    time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 触发事件（发送到消息队列或事件系统）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> triggerEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AmlEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 假设我们将事件发送到 Kafka 或其他消息队列</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kafkaProducer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aml-events&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个例子中，当交易被检测到高风险时（例如，交易量或地址行为异常），AML 规则引擎生成一个事件，并通过 Kafka 消息队列发送该事件。KEDA 可以监听该消息队列，并基于此触发相应的事件响应。</p><h3 id="外部事件源触发-如-kafka" tabindex="-1">外部事件源触发（如 Kafka） <a class="header-anchor" href="#外部事件源触发-如-kafka" aria-label="Permalink to &quot;外部事件源触发（如 Kafka）&quot;">​</a></h3><p>KEDA 支持多种事件源，最常见的事件源之一是 Kafka。假设你使用 Kafka 作为事件源，可以配置 KEDA 监听 Kafka 消息队列上的特定主题，如 <code>aml-events</code>。</p><p>KEDA 的配置示例如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">keda.sh/v1alpha1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ScaledObject</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">aml-rule-engine-scaler</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  scaleTargetRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">aml-rule-engine</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  triggers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">kafka</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        bootstrapServers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kafka-broker:9092&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        topic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aml-events&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        consumerGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aml-group&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        lagThreshold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;100&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 当消息队列中的滞后量超过 100 时触发扩展</span></span></code></pre></div><h3 id="触发外部事件的规则设置" tabindex="-1">触发外部事件的规则设置 <a class="header-anchor" href="#触发外部事件的规则设置" aria-label="Permalink to &quot;触发外部事件的规则设置&quot;">​</a></h3><p>事件生成规则 是定义哪些条件下应触发外部事件的核心。以下是几种常见的事件触发规则，可以通过这些规则生成对应的外部事件：</p><ul><li><p>高交易量触发规则：当某个地址在短时间内进行大量交易时，触发 <code>TRANSACTION_VOLUME_INCREASE</code> 事件。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transaction.Volume </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threshold {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createAmlEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TRANSACTION_VOLUME_INCREASE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, transaction.Address, transaction.Volume)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    triggerEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>高风险地址交互规则：当某个地址频繁与已知的高风险地址交易时，触发 <code>HIGH_RISK_ADDRESS_INTERACTION</code> 事件。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isHighRiskAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transaction.Address) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createAmlEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HIGH_RISK_ADDRESS_INTERACTION&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, transaction.Address, transaction.Amount)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    triggerEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>风险评分超过阈值规则：当某个地址的风险评分超过预设阈值时，触发 <code>RISK_SCORE_ALERT</code> 事件。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> riskScore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transaction.Address) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> riskScoreThreshold {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createAmlEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RISK_SCORE_ALERT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, transaction.Address, transaction.Amount)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    triggerEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h3 id="如何触发不同类型的事件" tabindex="-1">如何触发不同类型的事件 <a class="header-anchor" href="#如何触发不同类型的事件" aria-label="Permalink to &quot;如何触发不同类型的事件&quot;">​</a></h3><p>事件的类型、内容和触发条件通常取决于业务需求。例如：</p><ul><li>交易量增加：交易量的突然激增可能表明某些异常行为，例如洗钱行为或市场操纵。这时生成 <code>TRANSACTION_VOLUME_INCREASE</code> 事件。</li><li>与高风险地址的交易：如果某个地址频繁与已知的高风险地址进行交易，可能表示该地址参与了非法活动，触发 <code>HIGH_RISK_ADDRESS_INTERACTION</code> 事件。</li><li>风险评分变化：如果某个地址的风险评分大幅度上升，触发 <code>RISK_SCORE_ALERT</code> 事件，以便规则引擎调整监控策略。</li></ul><h3 id="如何将外部事件与-keda-集成" tabindex="-1">如何将外部事件与 KEDA 集成 <a class="header-anchor" href="#如何将外部事件与-keda-集成" aria-label="Permalink to &quot;如何将外部事件与 KEDA 集成&quot;">​</a></h3><p>当事件源（例如 Kafka、RabbitMQ、Redis 等）接收到来自 AML 规则引擎的事件后，KEDA 将根据配置的触发条件进行相应的处理。KEDA 监听到特定事件时，自动扩展或者触发操作。</p><p>KEDA 的工作流程</p><ol><li>规则引擎检测到异常活动：根据设置的规则（如交易量、风险评分等），AML 规则引擎会生成并发送事件。</li><li>事件源（Kafka 或其他）接收事件：KEDA 监听配置的消息队列，并接收到来自规则引擎的事件。</li><li>KEDA 根据事件触发扩展操作：KEDA 根据事件的类型（如消息队列的滞后量、消息内容等）来触发规则引擎的自适应调整或自动扩展。</li></ol><h2 id="aml规则引擎的闭环机制" tabindex="-1">AML规则引擎的闭环机制 <a class="header-anchor" href="#aml规则引擎的闭环机制" aria-label="Permalink to &quot;AML规则引擎的闭环机制&quot;">​</a></h2><p>我大致把这个流程理解为规则引擎检测到异常活动，生成事件源发送到kafka, 然后KEDA监听kafka的消息队列，并且根据事件触发规则引擎的自适应调整，形成一个循环。</p><h3 id="流程简述" tabindex="-1">流程简述 <a class="header-anchor" href="#流程简述" aria-label="Permalink to &quot;流程简述&quot;">​</a></h3><ol><li>规则引擎检测到异常活动：</li></ol><ul><li>规则引擎实时分析区块链交易数据、地址行为、风险评分等，检测到可能的洗钱行为或其他风险事件。</li><li>当检测到某些特定的异常活动（如交易量激增、高风险地址交互等）时，规则引擎生成一个 事件。</li></ul><ol start="2"><li>事件通过 Kafka 发送到事件源：</li></ol><ul><li><p>这些异常活动会转化为 事件消息（例如，<code>TRANSACTION_VOLUME_INCREASE</code>、<code>RISK_SCORE_ALERT</code> 等），并通过 Kafka 或其他消息队列发送出去。事件源（Kafka）将这些事件传递给系统中的其他组件。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 规则引擎检测到异常并触发事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createAmlEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TRANSACTION_VOLUME_INCREASE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0x123456&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kafkaProducer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aml-events&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event)</span></span></code></pre></div></li></ul><ol start="3"><li>KEDA 监听 Kafka 消息队列：</li></ol><ul><li>KEDA 配置为监听 Kafka 或其他消息队列（如 RabbitMQ）的特定主题（如 <code>aml-events</code>）。</li><li>KEDA 监控消息队列中的消息，并根据特定的触发条件（例如，消息队列中的滞后量、消息数量等）来触发伸缩或其他操作。</li></ul><ol start="4"><li><p>根据事件触发自适应调整：</p><p>当 KEDA 监听到消息队列中有新消息时（即，某个事件的触发），它会按照配置的触发条件，自动扩展或调整相关的服务（例如，AML 规则引擎的处理能力）。</p><div class="warning custom-block"><p class="custom-block-title">例子</p><p>如果交易量异常事件（TRANSACTION_VOLUME_INCREASE）被触发，KEDA 可以自动启动更多的规则引擎实例，以处理更高的交易量和风险评估任务。</p></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># KEDA 配置示例：监听 Kafka 消息队列</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">keda.sh/v1alpha1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ScaledObject</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">aml-rule-engine-scaler</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  scaleTargetRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">aml-rule-engine</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  triggers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">kafka</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        bootstrapServers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kafka-broker:9092&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        topic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aml-events&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        consumerGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aml-group&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        lagThreshold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;100&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 设置滞后阈值，超出时触发扩展</span></span></code></pre></div></li><li><p>循环调整与优化：</p></li></ol><ul><li>在 <strong>自适应调整</strong> 后，规则引擎的处理能力增强（例如，更多的计算节点、更多的实例等），能够处理更多的事件和数据。</li><li>一旦系统处理完当前的事件和数据，它会返回到初始状态，等待下一个触发条件或新的异常活动的到来。</li><li>如果持续监控到新的异常事件，规则引擎可能会再次触发事件，并通过 Kafka 发送到 KEDA，再次触发自适应调整，形成一个<strong>闭环</strong>。</li></ul><h3 id="流程图解" tabindex="-1">流程图解 <a class="header-anchor" href="#流程图解" aria-label="Permalink to &quot;流程图解&quot;">​</a></h3><p>简化后的流程可以如下图所示：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>+-----------------------+</span></span>
<span class="line"><span>| AML Rule Engine       |</span></span>
<span class="line"><span>| (检测异常活动)        |</span></span>
<span class="line"><span>+-----------------------+</span></span>
<span class="line"><span>            |</span></span>
<span class="line"><span>            | (生成事件，发送到 Kafka)</span></span>
<span class="line"><span>            v</span></span>
<span class="line"><span>+------------------------+</span></span>
<span class="line"><span>| Kafka / Event Source    |</span></span>
<span class="line"><span>| (接收事件消息)         |</span></span>
<span class="line"><span>+------------------------+</span></span>
<span class="line"><span>            |</span></span>
<span class="line"><span>            | (KEDA 监听到事件)</span></span>
<span class="line"><span>            v</span></span>
<span class="line"><span>+-------------------------+</span></span>
<span class="line"><span>| KEDA Autoscaler         |</span></span>
<span class="line"><span>| (触发自适应调整)       |</span></span>
<span class="line"><span>+-------------------------+</span></span>
<span class="line"><span>            |</span></span>
<span class="line"><span>            | (自动扩展/调整资源)</span></span>
<span class="line"><span>            v</span></span>
<span class="line"><span>+-------------------------+</span></span>
<span class="line"><span>| AML Rule Engine         |</span></span>
<span class="line"><span>| (调整检测能力)         |</span></span>
<span class="line"><span>+-------------------------+</span></span>
<span class="line"><span>            |</span></span>
<span class="line"><span>            | (处理新事件)</span></span>
<span class="line"><span>            v</span></span>
<span class="line"><span>        循环...</span></span></code></pre></div><h3 id="关键要素" tabindex="-1">关键要素 <a class="header-anchor" href="#关键要素" aria-label="Permalink to &quot;关键要素&quot;">​</a></h3><ul><li>事件生成：规则引擎根据事先设定的规则，实时监控并识别异常活动（如交易量激增、高风险地址交互等），并将其转化为可被 KEDA 监听的事件（例如 Kafka 消息）。</li><li>事件传输：将事件通过 Kafka、RabbitMQ 或其他消息队列发送，作为事件源供 KEDA 监听。</li><li>KEDA 监听与触发：KEDA 配置为监听事件源（如 Kafka），并在满足特定条件时（如消息滞后量、事件数量等），触发相关操作，自动扩展或调整规则引擎。</li><li>规则引擎自适应调整：KEDA 的触发机制将导致规则引擎根据系统负载和异常活动的强度进行自适应调整。例如，当检测到高风险交易时，自动增加计算实例处理更多的交易数据。</li></ul>`,63),h=[p];function t(e,k,E,r,d,g){return a(),i("div",{"data-pagefind-body":!0},h)}const y=s(l,[["render",t]]);export{o as __pageData,y as default};
