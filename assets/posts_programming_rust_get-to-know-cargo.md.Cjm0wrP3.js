import{j as s,b as i,c as a,aa as t}from"./chunks/framework._Kr-eMMD.js";const F=JSON.parse('{"title":"Rust基础知识系列一：认识Cargo","description":"","frontmatter":{"sidebar":false,"cover":"https://cdn.jsdelivr.net/gh/hyperter96/tech-blog/docs/assets/images/rust-cover.png","date":"2023-11-02T00:00:00.000Z","tag":["Rust","编程基础"],"sticky":1,"next":{"text":"Rust基础知识系列二：语句、表达式、格式化输出","link":"/posts/programming/rust/statement-expr-print"},"head":[]},"headers":[],"relativePath":"posts/programming/rust/get-to-know-cargo.md","filePath":"posts/programming/rust/get-to-know-cargo.md","lastUpdated":1712826380000}'),l={name:"posts/programming/rust/get-to-know-cargo.md"},n=t(`<h1 id="rust基础知识系列一-认识cargo" tabindex="-1">Rust基础知识系列一：认识Cargo <a class="header-anchor" href="#rust基础知识系列一-认识cargo" aria-label="Permalink to &quot;Rust基础知识系列一：认识Cargo&quot;">​</a></h1><p>作为一门现代化语言，Rust 吸收了多个语言的包管理优点，为大家提供超级大杀器： <code>cargo</code>，真的，再挑剔的开发者，都对它赞不绝口。👍</p><p>总而言之，<code>cargo</code> 提供了一系列的工具，从项目的建立、构建到测试、运行直至部署，为 Rust 项目的管理提供尽可能完整的手段。同时，与 Rust 语言及其编译器 <code>rustc</code> 紧密结合，可以说用了后就忘不掉，如同初恋般的感觉。</p><h2 id="创建helloworld项目" tabindex="-1">创建HelloWorld项目 <a class="header-anchor" href="#创建helloworld项目" aria-label="Permalink to &quot;创建HelloWorld项目&quot;">​</a></h2><p>上文提到，Rust 语言的包管理工具是 <code>cargo</code>。不过，我们无需再手动安装，之前安装 Rust 的时候，就已经一并安装了。</p><p>当我们想要创建一个项目时，譬如创建<code>hello_world</code>项目，</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello_world</span></span></code></pre></div><p>会生成以下目录结构：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello_world/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.rs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> target</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .rustc_info.json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debug</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .cargo-lock</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello_world</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello_world.d</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .fingerprint/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deps/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> examples/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> incrementals/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .gitignore</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Cargo.lock</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 同一项目的 toml 文件生成的项目依赖详细清单，一般不用修改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Cargo.toml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 存储了项目的所有元配置信息</span></span></code></pre></div><h2 id="cargo-check" tabindex="-1"><code>cargo check</code> <a class="header-anchor" href="#cargo-check" aria-label="Permalink to &quot;\`cargo check\`&quot;">​</a></h2><p>当项目大了后，<code>cargo run</code> 和 <code>cargo build</code> 不可避免的会变慢，那么有没有更快的方式来验证代码的正确性呢？大杀器来了，接着！</p><p><code>cargo check</code> 是我们在代码开发过程中最常用的命令，它的作用很简单：快速的检查一下代码能否编译通过。因此该命令速度会非常快，能节省大量的编译时间。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> check</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Checking</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world_hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v0.1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (/root/go/src/rust-learning/hello_world)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Finished</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [unoptimized </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debuginfo]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.06s</span></span></code></pre></div><h2 id="cargo-toml-和-cargo-lock" tabindex="-1"><code>Cargo.toml</code> 和 <code>Cargo.lock</code> <a class="header-anchor" href="#cargo-toml-和-cargo-lock" aria-label="Permalink to &quot;\`Cargo.toml\` 和 \`Cargo.lock\`&quot;">​</a></h2><p><code>Cargo.toml</code> 和 <code>Cargo.lock</code> 是 <code>cargo</code> 的核心文件，它的所有活动均基于此二者。</p><ul><li><code>Cargo.toml</code> 是 <code>cargo</code> 特有的项目数据描述文件。它存储了项目的所有元配置信息，如果 Rust 开发者希望 Rust 项目能够按照期望的方式进行构建、测试和运行，那么，必须按照合理的方式构建 <code>Cargo.toml</code>。</li><li><code>Cargo.lock</code> 文件是 <code>cargo</code> 工具根据同一项目的 <code>toml</code> 文件生成的项目依赖详细清单，因此我们一般不用修改它，只需要对着 <code>Cargo.toml</code> 文件撸就行了。</li></ul><div class="important custom-block github-alert"><p class="custom-block-title">提问</p><p>什么情况下该把 <code>Cargo.lock</code> 上传到 git 仓库里？</p><p>很简单，当你的项目是一个可运行的程序时，就上传 <code>Cargo.lock</code>，如果是一个依赖库项目，那么请把它添加到 <code>.gitignore</code> 中</p></div><h3 id="package-配置段落" tabindex="-1"><code>package</code> 配置段落 <a class="header-anchor" href="#package-配置段落" aria-label="Permalink to &quot;\`package\` 配置段落&quot;">​</a></h3><p><code>package</code> 中记录了项目的描述信息，典型的如下：</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world_hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">edition = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2021&quot;</span></span></code></pre></div><p><code>name</code> 字段定义了项目名称，<code>version</code> 字段定义当前版本，新项目默认是 <code>0.1.0</code>，<code>edition</code> 字段定义了我们使用的 Rust 大版本。因为本书很新（不仅仅是现在新，未来也将及时修订，跟得上 Rust 的小步伐），所以使用的是 Rust edition 2021 大版本。</p><h3 id="定义项目依赖" tabindex="-1">定义项目依赖 <a class="header-anchor" href="#定义项目依赖" aria-label="Permalink to &quot;定义项目依赖&quot;">​</a></h3><p>使用 <code>cargo</code> 工具的最大优势就在于，能够对该项目的各种依赖项进行方便、统一和灵活的管理。</p><p>在 <code>Cargo.toml</code> 中，主要通过各种依赖段落来描述该项目的各种依赖项：</p><ul><li>基于 Rust 官方仓库 crates.io，通过版本说明来描述</li><li>基于项目源代码的 git 仓库地址，通过 URL 来描述</li><li>基于本地项目的绝对路径或者相对路径，通过类 Unix 模式的路径来描述</li></ul><p>这三种形式具体写法如下：</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rand = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hammer = { version = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.5.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color = { git = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/bjz/color-rs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geometry = { path = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;crates/geometry&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div>`,27),e=[n];function h(p,k,o,r,d,c){return i(),a("div",null,e)}const E=s(l,[["render",h]]);export{F as __pageData,E as default};
